device syncing:

Devices a,b,c on account, all synced

    remote.modifiedTime = t1

    (a,b,c).localModifiedTime = t1
    (a,b,c).remoteModifiedTime = t1

a makes change on a.local

    a.localModifiedTime = t2

a announces changes to remote

    remote.modifiedTime = t2

remote pushes update notice to all (remote isn't aware of who sent it)

    (a,b,c).remoteModifiedTime = t2

b asks remote for update (1st to respond, gets priority)

remote pushes update request all

since a.localModifiedTime = b.remoteModifiedTime = remote.modifiedTime = t2, a has latest update and accepts update request

communications is negotiated between sender, a, and receiver, b (likely via webrtc, but let's abstract away the messy details)

update is sent to b (again, via webrtc, but details are messy)

    b.localModifiedTime = t2    // now both a and b meet requirements to act as senders and can initiate update

--------------------------------------------
conflict resolution:

Devices a,b,c on account, all synced

    remote.modifiedTime = t1

    (a,b,c).localModifiedTime = t1
    (a,b,c).remoteModifiedTime = t1

a loses network connectivity

a makes change on local

    a.localModifiedTime = t2

a unable to announce changes to remote

b makes change on local

    b.localModifiedTime = t3

b announces changes to remote

    remote.modifiedTime = t3

remote pushes update notice to all (even though a hasn't gotten it yet)

    (b,c).remoteModifiedTime = t3

c asks remote for update

remote pushes update request to all (a still doesn't get this, if it does, it would ignore as t2 != t3)

since b.localModifiedTime = b.remoteModifiedTime = remote.modifiedTime = t3, b has latest update and accepts update request

communication between b and c negotiated

update is sent from b to c

    c.localModifiedTime = t3

a gains network connectivity

    note that:
        a.localModifiedTime = t2
        a.remoteModifiedTime = t1
        remote.modifiedTime = t3
    thus, a knows it missed an update and it's own update conflicts with remote.
    To rectify, a gets update, but doesn't apply it yet. This is where the merge happens.

remote pushes update notice to a

    a.conflict = true
    a.remoteModifiedTime = t3
    a.remoteModifiedTime.v2 = t1

a sends update request to remote

remote pushes update request to all (a will ignore, b or c can accept, 1st to accept gets priority)

since c.localModifiedTime = c.remoteModifiedTime = remoote.modifiedTime = t3, c has latest update and accaepts update request

communication between c and a negotiated

t3 update sent from c to a

a performs merge(t2, t3)    // for now let this be magic

    a.localModifiedTime = t4    // continues with standard device syncing